generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApplicationType {
  BE_ARTISAN      
  DISABLE_PROFILE 
}

enum Role {
  USER
  ARTISAN
  MODERATOR
  ADMIN
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  role       Role[]
  isDisabled Boolean  @default(false) @map("is_disabled")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  profile                         UserProfile?
  artisan                         ArtisanProfile?
  sessions                        Session[]
  artisanCreationRequestsSent     ArtisanApplication[] @relation("userRequesting")
  artisanCreationRequestsReviewed ArtisanApplication[] @relation("userReviewer")
  Attachment                      Attachment[]

  @@map("users")
}

model UserProfile {
  id         String   @id @default(uuid())
  userId     String   @unique @map("fk_user_id")
  name       String
  socialName String?  @map("social_name")
  cpf        String   @unique
  birthDate  DateTime @map("dt_birth")
  street     String?
  postalCode String?  @map("postal_code")
  city       String?
  number     String?
  phone      String?
  avatar     String?

  user User @relation(fields: [userId], references: [id])

  @@map("users_profile")
}

model ArtisanProfile {
  id                     String   @id @default(uuid())
  userId                 String   @unique @map("fk_user_id")
  userName               String   @unique @map("user_name")
  rawMaterial            String   @map("raw_material")
  technique              String
  finalityClassification String   @map("finality_classification")
  sicab                  String
  sicabRegistrationDate  DateTime @map("sicab_registration_date")
  sicabValidUntil        DateTime @map("sicab_valid_until")
  isDisabled             Boolean  @default(true) @map("is_disabled")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @map("updated_at")

  user       User         @relation(fields: [userId], references: [id])
  Attachment Attachment[]

  @@map("artisans_profile")
}

model ArtisanApplication {
  id                     String           @id @default(uuid())
  userId                 String           @map("fk_user_id")
  type                   ApplicationType  @default(BE_ARTISAN) @map("type")
  rawMaterial            String           @map("raw_material")
  technique              String
  finalityClassification String           @map("finality_classification")
  sicab                  String
  sicabRegistrationDate  DateTime         @map("sicab_registration_date")
  sicabValidUntil        DateTime         @map("sicab_valid_until")
  status                 RequestStatus    @default(PENDING)
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @default(now()) @map("updated_at")
  reviewerId             String?          @map("fk_user_reviewer_id")
  rejectionReason        String?

  userRequesting User  @relation(fields: [userId], references: [id], name: "userRequesting")
  userReviwer    User? @relation(fields: [reviewerId], references: [id], name: "userReviewer")

  @@map("artisan_applications")
}

model Attachment {
  id        String   @id @default(uuid())
  userId    String?  @map("fk_user_id")
  artisanId String?  @map("fk_artisan_id")
  fileName  String   @map("file_name")
  filePath  String   @map("file_path")
  fileType  String   @map("file_type")
  fileSize  BigInt   @map("file_size")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user    User?           @relation(fields: [userId], references: [id])
  artisan ArtisanProfile? @relation(fields: [artisanId], references: [id])

  @@map("attachments")
}

model Session {
  id        String    @id @default(uuid())
  userId    String    @map("fk_user_id")
  startedAt DateTime  @default(now()) @map("started_at")
  endedAt   DateTime? @map("ended_at")
  ipHost    String    @map("ip_host")
  device    String

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}
